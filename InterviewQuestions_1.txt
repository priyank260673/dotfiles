Modern C++ - Automatic Memory Managements 
==========================================

Modern C++ - Meta Programming 
=============================
-> Which header to include for getting C++ traits for metaprogramming?
   Can you provide exmple of some type traits availble to use?


Modern C++ - Compile Time Things (constexpr and more) 
=====================================================
-> Generate unique hash values for given string at compile time. 
 OR What is following code doing? 

constexpr uint16_t hash_value(const char & c) {
    return uint16_t(c - ' ');
}
template<char ... Chars,typename T, T... ints>
constexpr uint32_t hash_value_constexpr(std::integer_sequence<T, ints...> int_seq)
{
    std::cout << "The sequence of size " << int_seq.size() << ": "; 
	((std::cout << Chars << ints + 1<< ' '), ...);
    constexpr uint32_t  value =  ((hash_value(Chars) * (ints + 1)) + ...);
    static_assert(value < std::numeric_limits<uint16_t>::max());
    return value;
}
template <char...Chars>
constexpr uint16_t testHash() {
    constexpr size_t multiplier = sizeof...(Chars);
    const uint32_t newValue = hash_value_constexpr<Chars...>(std::make_integer_sequence<int, multiplier>{});
	return newValue;
}
enum TestEnum : public uint16_t 
{
	First=testHash<'F', 'i', 'r', 's', 't'>,
	Second=testHash<'S', 'e', 'c', 'o', 'n', 'd'>;
};

-> Write fibionacci series and convert that function so it can be run at compile time
int fib(int n) 
{ 
    if (n <= 1) 
        return n; 
    return fib(n-1) + fib(n-2); 
} 

template <int N>
int fibConstExpr ()
{
	if constexpr (N <= 2)
		return 1;
	else
		return fibConstExpr<N-1>() + fibConstExpr <N-2>();
}

C++ Templates - SFINAE 
======================
// How std::void_t can be used?
template< class... >
using void_t = void;


struct A { int x; }; // Returns true_type
struct B { }; // Returns false_type

// Primary template
template <typename T, typename U = std::void_t<>>
struct HasX : std::false_type { };

// Specialization 
template <typename T>
struct HasX <T, std::void_t<decltype(T::x)>> : std::true_type { };

int main() 
{
	if constexpr (HasX<A>::value) 
	{
		std::cout << " Struc has X data member" << std::endl;
	}
}

C++ Templates - Policy Based 
==========================


C++ Templates - CRTP 
====================
Convert following in CRTP pattern and how it can be used? 

class Interface {
public:
	virtual void process() = 0;
};

class Impl : public Interface
{
	virtuanl void process() { std::cout << " Impl " << std::endl;}
};

template <typename Impl>
class Interface
{
    public:
    void process()
    {
        impl().process();
    }
    private:
    Impl& impl() {
        return *static_cast<Impl*> (this);
    }
};

class Impl : public Interface<Impl>
{
    public:
    void process()
    {
        std::cout << " Impl process" << std::endl;
    }
};

Interface<Impl>  obj = new Impl;
obj->process(); 


C++ Templates - class templates 
===============================


C++ Templates - Traits 
======================


C++ Templates - Partial Specialization 
=======================================

-> What will be output here? Will this code compile? 

template<class T, int I> // primary template
struct A
{
    void f() {  std::cout << " Primary template f()" << std::endl; }
    void g()  { std::cout << " Primary template g()" << std::endl; }
    void h()  { std::cout << " Primary template h()" << std::endl; }
};

// partial specialization
template<class T>
struct A<T, 2>
{
    void f();
    void g() {std::cout << "T,2 - partial specialization g()" << std::endl; }
    void h() {std::cout << "T,2 - partial specialization h()" << std::endl; }
};

template<>
void A<char, 2>::h()
{
    std::cout << "char,2 - full specialization h()" << std::endl;
}

int main() {
    A<char, 0> a0;
    A<char, 2> a2;
    a0.f();
    a2.g(); // OK, uses partial specialization's member definition
    a2.h(); // OK, uses fully-specialized definition of
            // the member of a partial specialization
    //a2.f(); // error: no definition of f() in the partial
            // specialization A<T,2> (the primary template is not used)
}

Output:

Primary template f()
T,2 - partial specialization g()
char,2 - full specialization h()

Debugging / Environment
===============================================
-> How to catch exception in debugger.
-> Attach running process.
-> Print number of threads. 
-> Development environment details - how you use/how it helps
   for faster development.

Own Research / Self Learning (websites you use) 
===============================================
-> cppreference.com
-> stackoverflow.com
-> isocpp.org/blog
-> youtube channels for C++ (cppcon)

-> Recent books or any blogs read/follow.
-> 

Data Structures + Efficiency (pros and cons of diff ones) 
===============================================


Computer Arch (cache etc) 
===============================================


Multi-threading - Synchronization/Locks/Cond Vars (why we avoid) 
================================================================
Implement lockguard class. Assume you have following interface:

struct mutex {
	void Lock() {}
	void Unlock() {}
};

struct LockGuard {
	LockGuard(mutex& mutexVal) : mutex_(mutexVal)  
	{
		mutex_.Lock();
	}
	~LockGuard() 
	{
		mutex_.Unlock();
	}
	private:
	LockGuard(const LockGuard&); 
	LockGuard(LockGuard&&); 
	LockGuard& operator = (const LockGuard&);
	LockGuard& operator = (LockGuard&&);
	mutex& mutex_;
};

Implement thread safe queue with mutex and condition variable: 

template<typename T>
class Queue
{
	public:
	void pop(T& item) 
	{
		LockGuard(mutex_);
		while (q.empty()) 
		{
			condition_.wait(mutex_);
		}
		item = queue_.front();
		queue_.pop();
	}
	void push(const T& item) 
	{
		{
			LockGuard(mutex_);
			queue_.push(item);
		}
		condition_.notify_one();
	}
	private:
	std::queue<T> queue_;
	std::mutex mutex_;
	std::condition_variable condition_;
};


Multi-threading - Message Passing (Actor Model) 
===============================================


Networking - UDP Unicast, UDP Multicast, TCP 
===========================================
-> Explain TCP handshake?
-> How does TCP server find status of clients those are dead without notifying server? 
-> Advantages of non-blocking socket?
-> Difference between TCP and UDP? 
-> How does TCP or UDP data gets received from wire to application? 


Networking - PCAPs/Wireshark 
===========================


Networking - Stack (OSI 7 Layers) 
=================================


Networking - Sockets 
=====================
-> Write basic TCP client and server. This might be too detailed.

Exchange Protocols - CME (compare/contrast) 
===========================

Behavioral Interview
====================
-> Talk about past projects.
-> Explain in details about couple of challenging bugs you fixed. 
-> Why looking for change?
-> 

Specific Programming/Coding Questions 
=====================================

-> What is sizeof(t) and sizeof(t1)? 
class Test{};
Test t;
at least 1. Since if 0, there is possiblity of two objects created at the same address.

class Test1{
	public:
	static int x;
	char c;
};
int Test::x = 1234;
Test1 t1;

-> What's the problem here and how to slove it? Pointer comparision instead of strings.
std::map<const char*, int> strMap;

struct StrCmp {
	bool operator() (const char * left, const char * right) const
	{
		return std::strncmp(left, right) < 0;
	}
};
std::map<const char*, int, StrCmp> strMap;

-> What will happen below? Program will abort and core being generated. 
   What to check if core file is not generated on machine?

void f() { throw 10; }
int main() {f();}

-> What's problem below? Recursion of copy constructor when called.
class Test {
public: 
  Test(Test t){}
};

-> Is following code safe? 
class Test{};
Test *tp = new Test();
free(tp);

-> What will happen if we execute this code? 
class Base { 
	public: 
		virtual void f() { cout << "Base::f()" << endl; } 
};

class Base : public Derived { 
	private: 
		virtual void f() { cout << "Derived::f()" << endl; } 
};
int main() 
{
	Base * p = new Derived();
	p->f();
}

-> Implement shared pointer.
//================ Reference Counter class ===========================//
class ReferenceCounter {
    public:
        ReferenceCounter() : _count (0) {
        }
        uint32_t Add() {
            cout << "Counter is: " << _count << endl;
            return ++_count;
        }
        uint32_t Remove() {
            cout << "Counter is: " << _count << endl;
            if (_count > 0) --_count;
            return _count;
        }
        uint32_t getCount() {
            return _count;
        }
    private:
        uint32_t _count;
};

//================ Shared Pointer class ===========================//
template <typename T> 
class SharedPtr {
    public:
        // Explicit constructor
        explicit SharedPtr(T* inPtr = 0): _storedPtr(inPtr), _refCtr (new ReferenceCounter) {
            cout << " SharedPtr constructor called. " << endl;
            _refCtr->Add();
        }
        // Destructor
        ~SharedPtr() {
            cout << " SharedPtr destructor called. " << endl;
            if (!_refCtr->Remove()) {
                delete _storedPtr;
                delete _refCtr;
                _storedPtr = 0;
                _refCtr = 0;
            }
        }
        // copy constructor
        SharedPtr(const SharedPtr<T>& inPtr) : _storedPtr(inPtr._storedPtr), 
            _refCtr (inPtr._refCtr) {
                cout << "default copy constructor " << endl;
            _refCtr->Add();
        }
        SharedPtr& operator= (const SharedPtr<T>& inPtr) {
            cout << "Assignment operator. " << endl;
            if (this == &inPtr) return;

            if (!refCtr->Remove()) {
                delete _storedPtr;
                delete _refCtr;
                _storedPtr = 0;
                _refCtr = 0;
            }
            // Assign information
            _storedPtr = inPtr._storedPtr;
            _refCtr = inPtr._refCtr;
            _refCtr->Add();
        }
        // conversion copy constructor
        template <typename U> 
        SharedPtr<T> (const SharedPtr<U>& inPtr) : _storedPtr(inPtr.get()), 
            _refCtr (inPtr.refCtr()) {
                cout << "conversion copy constructor " << endl;
            _refCtr->Add();
        }
        template <typename U>
        SharedPtr<T>& operator= (const SharedPtr<U>& inPtr) {
            if (this == &inPtr) return;
            cout << "Assignment operator. " << endl;
            if (!refCtr->Remove()) {
                delete _storedPtr;
                delete _refCtr;
                _storedPtr = 0;
                _refCtr = 0;
            }
            // Assign information
            _storedPtr = inPtr.get();
            _refCtr = inPtr.refCtr();
            _refCtr->Add();
        }
        // overload operator *
        T& operator* () const {
            return *_storedPtr;
        }
        T* operator-> () const {
            return _storedPtr;
        }
        // Accessors
        T * get() const {
            return _storedPtr;
        }
        ReferenceCounter* refCtr() const {
            return _refCtr;
        }
        uint32_t use_count() const {
            return _refCtr->getCount();
        }
        operator bool () const {
            return (_storedPtr != 0);
        }

    private:
        T * _storedPtr;
        ReferenceCounter * _refCtr;
};


// =============== LINKED LIST IMPLEMENTATION =====================//

// Node
template<class T>
class Node
{
    public:
        T data;
        Node<T> * next = nullptr;
        Node<T>(const T& d):data(d), next() {}
        Node<T>(const Node<T>& copyNode) : data(copyNode.data), next() {}
    private:
        Node<T>& operator=(const Node<T>&);
};

template<class T>
class LinkedList
{
    public:
        Node<T> * head;
        Node<T> * tail;

        LinkedList(const LinkedList& LL);
        LinkedList& operator=(LinkedList byValList);
        LinkedList(): head(NULL), tail(NULL) {}
        LinkedList(Node<T> * newNode) : head(newNode), tail(newNode) {}
        ~LinkedList();

        static LinkedList<int> sumLists(const LinkedList<int>& LL1, LinkedList<int>& LL2);

        void insertToTail(T val);
        void insertToHead(T val);
        void print();
        void printBackwards();
        void reverse();
        void reverseRecFunc(Node<T>*& prev, Node<T>*& curr, Node<T>*& currN);
        void reverse1();
        void revRec (Node<T>* head);
        void reverse2();
}; 

    template<class T>
LinkedList<T>::LinkedList(const LinkedList<T>& LL) : head(NULL), tail(NULL)
{
    const Node<T> * curr = LL.head;

    if (!head && curr)
    {
        head = new Node<T>(curr->data);
        tail = head;
        curr = curr->next;
    }

    while (curr)
    {
        Node<T> * newNode = new Node<T>(curr->data);
        tail->next = newNode;
        tail = newNode;
        curr = curr->next;
    }
}

    template<class T>
LinkedList<T>& LinkedList<T>::operator=(LinkedList byValList)
{
    std::swap(head, byValList.head);
    return *this;
}

    template<class T>
LinkedList<T>::~LinkedList()
{
    Node<T> * curr = head;
    while (head)
    {
        head = head->next;
        delete curr;
        curr = head;
    }
}

    template<class T>
void LinkedList<T>::insertToTail(T val)
{
    Node<T> * newNode = new Node<T>(val);
    if (tail == NULL)
    {
        newNode->next = tail;
        tail = newNode;
        head = newNode;
        return;
    }
    tail->next = newNode;
    tail = tail->next;
}

    template<class T>
void LinkedList<T>::insertToHead(T val)
{
    Node<T> * newNode = new Node<T>(val);
    newNode->next = head;
    head = newNode;
    if (head->next == NULL)
        tail = newNode;
}

    template<class T>
void LinkedList<T>::print()
{
    Node<T> * curr = head;
    while (curr)
    {
        cout<<curr->data<<" --> ";
        curr = curr->next;
    }
    cout<<"NULL"<<endl;
}

/**** REVERSE LINKED LIST ****/
    template<class T>
void LinkedList<T>::reverse()
{
    // check for empty list
    if (!head) return;

    // assign tail to head
    //auto * tail = head;
    // Iterate through nodes
    Node<T> * prev = nullptr;
    auto * curr = head;
    auto * currN = curr->next;
    while (curr)
    {
        // Move all three pointers
        curr->next = prev;
        prev = curr;
        curr = currN;
        // Check require
        if (currN)
            currN = currN->next;
    }

    // assign head to previous
    head = prev;
}

    template<class T>
void LinkedList<T>::reverseRecFunc(Node<T>*& prev, Node<T>*& curr, Node<T>*& currN)
{
    // check for empty list
    if (!curr) return;

    curr->next = prev;
    prev = curr;
    curr = currN;

    if (currN) {
        currN = currN->next;
    }

    // Call recursion
    reverseRecFunc (prev, curr, currN);
}

    template<class T>
void LinkedList<T>::reverse1()
{
    // check for empty list
    if (!head) return;

    // assign tail to head
    auto * tail = head;

    // Iterate through nodes
    Node<T> * prev = nullptr;
    auto * curr = head;
    auto * currN = head->next;

    // Call recursive func here
    reverseRecFunc (prev, curr, currN);

    // assign head to previous
    head = prev;
}
    template<class T>
void LinkedList<T>::revRec(Node<T> * recNode)
{
    // We received at last node so, set head and return 
    if (recNode->next == NULL)
    {
        head = recNode;
        return;
    }
    // Call recusion with next node
    revRec (recNode->next);
    // Recursion here....
    recNode->next->next = recNode;
    recNode->next = NULL;
    // Setup tail
    tail = recNode;
}

    template<class T>
void LinkedList<T>::reverse2()
{
    revRec (head);
}

void runLinkListChecks()
{
    LinkedList<int> intList;
    intList.insertToTail(10);
    intList.insertToTail(20);
    intList.insertToTail(30);
    intList.insertToTail(40);
    intList.insertToTail(50);
    intList.insertToTail(60);
    intList.insertToTail(70);
    intList.insertToTail(80);
    intList.insertToTail(90);
    intList.insertToTail(100);
    intList.print();
    intList.reverse();
    intList.print();
    intList.reverse();
    intList.print();
    intList.reverse();
    intList.print();
    intList.reverse();
    intList.print();
    for (int i = 0; i < 5; ++i) 
    {
        intList.reverse2();
        intList.print();
        intList.reverse2();
        intList.print();
    }
}


//------------------ BINARY TREE --------------------//
// Node 
struct node {
    node (int inData) : data (inData) {
    }
    int data;
    struct node* left = 0;
    struct node* right = 0;
};

// Binary tree
class BinaryTree {
    public:
        // Insert node in binary tree
        void insert (node *& newNode, int key) {
            // 1. If the tree is empty, return a new, single node
            if (newNode == nullptr) {
                newNode = new node (key);
            } else {
                // 2. Otherwise, recur down the tree
                if (newNode->data > key) {
                    insert(newNode->left, key);
                } else {
                    insert(newNode->right, key);
                }
            }
        }
        // In order traversal
        void InOrderTraversal (node * root) {
            if (!root) return;
            InOrderTraversal (root->left);
            std::cout <<  root->data << " ";
            InOrderTraversal (root->right);
        }

        // In order traversal
        void PreOrderTraversal (node * root) {
            if (!root) return;
            std::cout <<  root->data << " ";
            PreOrderTraversal (root->left);
            PreOrderTraversal (root->right);
        }

        // Search particular element in binary tree
        node * Search (node * root, int key) {
            if (!root) {
                return nullptr;
            } else if (root->data == key) {
                return root;
            }
            if (root->data > key) {
                return Search (root->left, key);
            } else {
                return Search (root->right, key);
            }
        }

        //--- Check if binary tree is BST
        bool isBST (node * root) {
            if (!root) { 
                return true;
            }
            if (root->left && root->right) {
                return (
                        (root->left->data < root->data) && 
                        (isBST (root->left)) && 
                        (root->right->data > root->data) && 
                        (isBST (root->right))
                       );
            } else if (root->left && !root->right) {
                return ((root->left->data < root->data) && 
                        (isBST (root->left)));

            } else if (root->right && !root->left) {
                return ((root->right->data > root->data) && 
                        (isBST (root->right)));
            } else { 
                return true;
            }
        }

        //--- print paths of binary tree
        void print (int path [], int position) {
            for (int i = 0; i < position; ++i) {
                std::cout << path[i] << " ";
            }
            std::cout << std::endl;
        }

        void printPaths (node *root, int path[], int position) {
            if (!root) return;
            path[position++] = root->data;
            if (root->left == NULL && root->right == NULL) {
                print (path, position);
                position = 0;
                return;
            }
            printPaths (root->left, path, position);
            printPaths (root->right, path, position);
        }

        int findMax (node * root) 
        {
            if (root == NULL) 
                return -1;
            int res = root->data;
            int lres = findMax (root->left);
            int rres = findMax (root->right);
            if (lres > res) 
                res = lres;
            if (rres > res) 
                res = rres;
            return res;
        }

        int sizeofTree (node * root)
        {
            if (root == NULL)
                return 0;
            int leftSize = sizeofTree (root->left);
            int rightSize = sizeofTree (root->right);
            return 1 + leftSize + rightSize;
        }

        int findMin (node * root)
        {
            if (root == NULL) 
                return 10000;
            int res = root->data;
            int lres = findMin (root->left);
            int rres = findMin (root->right);
            if (rres < res) 
                res = rres;
            if (lres < res) 
                res = lres;
            return res;
        }

        int maxHeight (node * root) 
        {
            if (root == NULL) return 0;
            int leftHeight = maxHeight  (root->left);
            int rightHeight = maxHeight  (root->right);

            if (rightHeight > leftHeight) 
                return rightHeight + 1 ;
            else 
                return leftHeight + 1;
        }

        bool removeNode (node * root, int value) 
        {
            if (!root) 
                return false;
            // Find out our node 
            if (root->left == NULL && root->right == NULL && root->data == value)
            {
                return true;
            }
            if (removeNode (root->left, value)) 
            {
                delete root->left;
                root->left = 0;
            }
            if (removeNode (root->right, value))
            {
                delete root->right;
                root->right = 0;
            }
            return false;
        }

        void deleteNode (node * root, int value) 
        {
            node * searchNode = Search (root, value); 
            if (searchNode) 
            {
                if (searchNode->right)
                {
                    int minVal = findMin (searchNode->right);
                    removeNode (searchNode, minVal);
                    searchNode->data = minVal;
                }
                else if (searchNode->left)
                {
                    int maxVal = findMax (searchNode->left);
                    removeNode (searchNode, maxVal);
                    searchNode->data = maxVal;
                }
            }
        }
};

void testBinaryTree () 
{
    BinaryTree bt;
    node * root = nullptr;
    bt.insert (root, 20);
    bt.insert (root, 10);
    bt.insert (root, 50);
    bt.insert (root, 30);
    bt.insert (root, 100);
    bt.insert (root, 15);
    bt.insert (root, 17);
    bt.insert (root, 96);
    bt.insert (root, 23);
    bt.insert (root, 18);
    std::cout << "Maximum value: " << bt.findMax(root) << std::endl;
    std::cout << "Minimum value: " << bt.findMin(root) << std::endl;
    std::cout << "Size of tree: " << bt.sizeofTree(root) << std::endl;
    std::cout << "Max height of tree: " << bt.maxHeight(root) << std::endl;
    int arr[30] = {};
    bt.printPaths (root, arr, 0);

    bt.deleteNode (root, 50);
    bt.deleteNode (root, 30);

    //bt.InOrderTraversal (root);

    node * data = bt.Search (root, 20);
    if (data) {
        std::cout << "Found key: " << data->data << std::endl;
    }
    data = bt.Search (root, 35);
    if (data) {
        std::cout << "Found key: " << data->data << std::endl;
    } else {
        std::cout << "Key not found." << std::endl;
    }
    bool val = bt.isBST (root);
    if (val) {
        std::cout << "Tree is binary search tree. " << std::endl;
    }
    bt.printPaths (root, arr, 0);
}

// Search
int myBinarySearch (int arr[], size_t startIndex, size_t endIndex, int val) { // Check start index and end index
    if ((startIndex > endIndex) || 
            (startIndex == endIndex && arr[startIndex] != val)) {
        return 0;
    }
    // Get midpoint
    size_t midPoint = (endIndex - startIndex) / 2;
    if (arr[midPoint] == val) {
        return val;
    }  
    // If value is less use left half otherwise
    // use right half
    if (val < arr[midPoint]) {
        return myBinarySearch (arr, startIndex, midPoint - 1, val);
    } else if (val > arr[midPoint]) {
        return myBinarySearch (arr, midPoint + 1, endIndex, val);
    } 
    return 0;
}


//-- Sum of digits
template <typename T>
//auto sumOfDigits (T number) -> decltype (number) {
size_t sumOfDigits (T number) {
    decltype (number) sum (0);
    while (number) {
        sum += (number % 10);
        number = number /10;
    }
    return sum;
}

//-- Convert string into integer
int stringToInt (const char * str) {
    auto len (strlen (str));
    int total(0);
    for (decltype (len) i = 0; i < len; ++i) {
        if (std::isdigit(str[i]) && std::isdigit(str[i+1])) {
            total += str[i] - '0';
            total *= 10;
        } else {
            total += str[i] - '0';
            return total;
        }
    }
    return total;
}

//-- Reverse string inplace
void reverseString (char * str) {
    auto startPtr = str;
    auto endPtr = str + strlen (str) - 1;
    while (startPtr < endPtr) {
        std::swap (*startPtr, *endPtr);
        ++startPtr;
        --endPtr;
    }
}

=====================================================================================
---- ORIGINAL QUESTIONS ----------
=====================================================================================
=> Find errors in following code: 
#include <vector.h>

void main(int argc, char** argv)
{
  int n;
  if (argc > 1)
    n = argv[0];
  int* stuff = new int[n];
  vector<int> v(100000);
  delete stuff;
  return 0;
}

=> Write contrustor, move constructor, destructor, assignment, move assignment, copy constructor 
class A
{
	int a{10};
	char * ptr;
	vector<int> intVec;
};

=> Is there a problem here? 
std::vector<BigObject> v(10);
for (auto elem : v) 
{
}

=> Is there a problem here?
	my_struct_t *bar;
	memset(bar, 0, sizeof(bar));

=> Value of i and j after execution? 
   int i = 5;
   int j = i++;

=> What is the output of following code? 

#include <iostream>

class Base {
	virtual void method() {
		std::cout << "from Base" << std::endl;
	}
	public:
	virtual ~Base() {
		std::cout << " Base descturor " << std::endl; 
		method();
	}
	void baseMethod() { method(); }
};

class Derived : public Base {
	void method() {
		std::cout << "from Derived" << std::endl;
	}
	public:
	~Derived() {
		std::cout << " Derived destructor " << std::endl; 
		method();
	}
};

int main(void) {
	Base* base = new Derived;
	base->baseMethod();
	delete base;
	return 0;
}

=> Is there a problem with following code?
class A
{
	public:
		A() {}
		~A(){}
};

class B: public A
{
	public:
		B():A(){}
		(){}
};

int main(void)
{
	A* a = new B();
	delete a;
}

=> What is the output here?

struct Fred {
	Fred(int n): v(n) {}
	std::vector<int> v;
};

int main() {
	using namespace std;
	Fred f(1);
	f.v[0] = 5;
	cout << f.v[0] << endl;
	f = 7;          // is this legal?
	cout << f.v[0]; // what is output here?
}

=> How can we sort vector and list? 

=> What does move constructor does? Write move constructor for a class. 

=> How do you know cache sizes on Linux? 

=> How do you know if UDP layer is dropping packets and how can you solve it? 

=> Best way to remove one element in vector. 

=> Find 10th greatest element in 1 million elements. 

=> Implement a method which returns two if two types passed to that method is same? 
    Do you know if there are traits like that in C++?


GENERIC:
=======
=> Discuss some problems faced during developing system you developed?

OPERATING SYSTEM:
================
=> How do you know cache sizes on Linux? 
=> How do you TCP/UDP buffer sizes? 
=> How do you know if UDP layer is dropping packets and how can you solve it? 

TOOLS:
=====
-> Sites that usually refer to for learning, development, keeping up to date with C++.
-> Static analyzer usage.
-> How do you investigate memory leak? 
-> Evironment setup for development.
-> How do you debug running applications? 
   How do you know what libraries are loaded in gdb? 
   How do you know how many threads are in process in gdb? 


=============== LAST IF TIME REMAININAG ===================
/**
 Find Kth index element in given array after sorting
 */

#pragma once
#include <cstddef>
#include <utility>
#include <vector>
#include <algorithm>
#include <iostream>

// Assumption: 
// Indexing is always based on zero. 
// Doing inplace sorting of an array. So, original array will change.
 
template <typename ContainerType>
size_t partition_array (ContainerType& arr, size_t startIndex, size_t endIndex)
{
	// Fill in code here
	return 0;
}

// int kth_element (int arr[], int startIndex, int endIndex, const int& kthIndex)
template <typename ContainerType>
int kth_element (ContainerType& arr, size_t size, size_t startIndex, size_t endIndex, const size_t& kthIndex)
{
	// Fill in code here
	return 0;
}

int main() {
	std::vector<int> v{5, 10, 3, 13, 1, 2, 18, 6};
	// sorted {1, 2, 3, 5, 6, 10, 13, 18};
	std::cout << kth_element(v, v.size(), 0, v.size()-1, 0) << std::endl;
}

===================================================================================

13) How do you call particular template method of only certain type?

template <typename T> 
void foo() 
{
	std::cout << " foo called " << std::endl;
}

14)  Implement is same class type - is same type returns true else false. 
std::is_same<T,T> return true or false.

/**
 Implement method to return true if two types passed is same. 
 */


