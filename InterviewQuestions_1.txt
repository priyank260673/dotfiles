Modern C++ - Automatic Memory Managements 

Modern C++ - Meta Programming 

Modern C++ - Compile Time Things (constexpr and more) 

-> Generate unique hash values for given string at compile time. 
-> What is following code doing? 

constexpr uint16_t hash_value(const char & c) {
    return uint16_t(c - ' ');
}
template<char ... Chars,typename T, T... ints>
constexpr uint32_t hash_value_constexpr(std::integer_sequence<T, ints...> int_seq)
{
    std::cout << "The sequence of size " << int_seq.size() << ": "; 
	((std::cout << Chars << ints + 1<< ' '), ...);
    constexpr uint32_t  value =  ((hash_value(Chars) * (ints + 1)) + ...);
    static_assert(value < std::numeric_limits<uint16_t>::max());
    return value;
}
template <char...Chars>
constexpr uint16_t testHash() {
    constexpr size_t multiplier = sizeof...(Chars);
    const uint32_t newValue = hash_value_constexpr<Chars...>(std::make_integer_sequence<int, multiplier>{});
	return newValue;
}
enum TestEnum : public uint16_t 
{
	First=testHash<'F', 'i', 'r', 's', 't'>,
	Second=testHash<'S', 'e', 'c', 'o', 'n', 'd'>;
};

C++ Templates - SFINAE 

C++ Templates - Policy Based 

C++ Templates - CRTP 

C++ Templates - class templates 

C++ Templates - Traits 

C++ Templates - Partial Specialization 

Debugging 

Own Research / Self Learning (websites you use) 

Data Structures + Efficiency (pros and cons of diff ones) 

Computer Arch (cache etc) 

Multi-threading - Synchronization/Locks/Cond Vars (why we avoid) 

Multi-threading - Message Passing (Actor Model) 

Networking - UDP Unicast, UDP Multicast, TCP 

Networking - PCAPs/Wireshark 

Networking - Stack (OSI 7 Layers) 

Networking - Sockets 

Exchange Protocols - CME (compare/contrast) 


Specific Programming/Coding Questions 
=====================================

-> What is sizeof(t) and sizeof(t1)? 
class Test{};
Test t;
at least 1. Since if 0, there is possiblity of two objects created at the same address.

class Test1{
	public:
	static int x;
	char c;
};
int Test::x = 1234;
Test1 t1;

-> What's the problem here and how to slove it? Pointer comparision instead of strings.
std::map<const char*, int> strMap;

struct StrCmp {
	bool operator() (const char * left, const char * right) const
	{
		return std::strncmp(left, right) < 0;
	}
};
std::map<const char*, int, StrCmp> strMap;

-> What will happen below? Program will abort and core being generated. 
   What to check if core file is not generated on machine?

void f() { throw 10; }
int main() {f();}

-> What's problem below? Recursion of copy constructor when called.
class Test {
public: 
  Test(Test t){}
};


-> Is following code safe? 
class Test{};
Test *tp = new Test();
free(tp);

-> What will happen if we execute this code? 
class Base { 
	public: 
		virtual void f() { cout << "Base::f()" << endl; } 
};

class Base : public Derived { 
	private: 
		virtual void f() { cout << "Derived::f()" << endl; } 
};
int main() 
{
	Base * p = new Derived();
	p->f();
}



-> Implement shared pointer.
//================ Reference Counter class ===========================//
class ReferenceCounter {
    public:
        ReferenceCounter() : _count (0) {
        }
        uint32_t Add() {
            cout << "Counter is: " << _count << endl;
            return ++_count;
        }
        uint32_t Remove() {
            cout << "Counter is: " << _count << endl;
            if (_count > 0) --_count;
            return _count;
        }
        uint32_t getCount() {
            return _count;
        }
    private:
        uint32_t _count;
};

//================ Shared Pointer class ===========================//
template <typename T> 
class SharedPtr {
    public:
        // Explicit constructor
        explicit SharedPtr(T* inPtr = 0): _storedPtr(inPtr), _refCtr (new ReferenceCounter) {
            cout << " SharedPtr constructor called. " << endl;
            _refCtr->Add();
        }
        // Destructor
        ~SharedPtr() {
            cout << " SharedPtr destructor called. " << endl;
            if (!_refCtr->Remove()) {
                delete _storedPtr;
                delete _refCtr;
                _storedPtr = 0;
                _refCtr = 0;
            }
        }
        // copy constructor
        SharedPtr(const SharedPtr<T>& inPtr) : _storedPtr(inPtr._storedPtr), 
            _refCtr (inPtr._refCtr) {
                cout << "default copy constructor " << endl;
            _refCtr->Add();
        }
        SharedPtr& operator= (const SharedPtr<T>& inPtr) {
            cout << "Assignment operator. " << endl;
            if (this == &inPtr) return;

            if (!refCtr->Remove()) {
                delete _storedPtr;
                delete _refCtr;
                _storedPtr = 0;
                _refCtr = 0;
            }
            // Assign information
            _storedPtr = inPtr._storedPtr;
            _refCtr = inPtr._refCtr;
            _refCtr->Add();
        }
        // conversion copy constructor
        template <typename U> 
        SharedPtr<T> (const SharedPtr<U>& inPtr) : _storedPtr(inPtr.get()), 
            _refCtr (inPtr.refCtr()) {
                cout << "conversion copy constructor " << endl;
            _refCtr->Add();
        }
        template <typename U>
        SharedPtr<T>& operator= (const SharedPtr<U>& inPtr) {
            if (this == &inPtr) return;
            cout << "Assignment operator. " << endl;
            if (!refCtr->Remove()) {
                delete _storedPtr;
                delete _refCtr;
                _storedPtr = 0;
                _refCtr = 0;
            }
            // Assign information
            _storedPtr = inPtr.get();
            _refCtr = inPtr.refCtr();
            _refCtr->Add();
        }
        // overload operator *
        T& operator* () const {
            return *_storedPtr;
        }
        T* operator-> () const {
            return _storedPtr;
        }
        // Accessors
        T * get() const {
            return _storedPtr;
        }
        ReferenceCounter* refCtr() const {
            return _refCtr;
        }
        uint32_t use_count() const {
            return _refCtr->getCount();
        }
        operator bool () const {
            return (_storedPtr != 0);
        }

    private:
        T * _storedPtr;
        ReferenceCounter * _refCtr;
};




=====================================================================================
=> Find errors in following code: 
#include <vector.h>

void main(int argc, char** argv)
{
  int n;
  if (argc > 1)
    n = argv[0];
  int* stuff = new int[n];
  vector<int> v(100000);
  delete stuff;
  return 0;
}

=> Write contrustor, move constructor, destructor, assignment, move assignment, copy constructor 
class A
{
	int a{10};
	char * ptr;
	vector<int> intVec;
};

=> Is there a problem here? 
std::vector<BigObject> v(10);
for (auto elem : v) 
{
}

=> Is there a problem here?
	my_struct_t *bar;
	memset(bar, 0, sizeof(bar));

=> Value of i and j after execution? 
   int i = 5;
   int j = i++;

=> What is the output of following code? 

#include <iostream>

class Base {
	virtual void method() {
		std::cout << "from Base" << std::endl;
	}
	public:
	virtual ~Base() {
		std::cout << " Base descturor " << std::endl; 
		method();
	}
	void baseMethod() { method(); }
};

class Derived : public Base {
	void method() {
		std::cout << "from Derived" << std::endl;
	}
	public:
	~Derived() {
		std::cout << " Derived destructor " << std::endl; 
		method();
	}
};

int main(void) {
	Base* base = new Derived;
	base->baseMethod();
	delete base;
	return 0;
}

=> Is there a problem with following code?
class A
{
	public:
		A() {}
		~A(){}
};

class B: public A
{
	public:
		B():A(){}
		(){}
};

int main(void)
{
	A* a = new B();
	delete a;
}

=> What is the output here?

struct Fred {
	Fred(int n): v(n) {}
	std::vector<int> v;
};

int main() {
	using namespace std;
	Fred f(1);
	f.v[0] = 5;
	cout << f.v[0] << endl;
	f = 7;          // is this legal?
	cout << f.v[0]; // what is output here?
}

=> How can we sort vector and list? 

=> What does move constructor does? Write move constructor for a class. 

=> How do you know cache sizes on Linux? 

=> How do you know if UDP layer is dropping packets and how can you solve it? 

=> Best way to remove one element in vector. 

=> Find 10th greatest element in 1 million elements. 

=> Implement a method which returns two if two types passed to that method is same? 
    Do you know if there are traits like that in C++?


GENERIC:
=======
=> Discuss some problems faced during developing system you developed?

OPERATING SYSTEM:
================
=> How do you know cache sizes on Linux? 
=> How do you TCP/UDP buffer sizes? 
=> How do you know if UDP layer is dropping packets and how can you solve it? 

TOOLS:
=====
-> Sites that usually refer to for learning, development, keeping up to date with C++.
-> Static analyzer usage.
-> How do you investigate memory leak? 
-> Evironment setup for development.
-> How do you debug running applications? 
   How do you know what libraries are loaded in gdb? 
   How do you know how many threads are in process in gdb? 


=============== LAST IF TIME REMAININAG ===================
/**
 Find Kth index element in given array after sorting
 */

#pragma once
#include <cstddef>
#include <utility>
#include <vector>
#include <algorithm>
#include <iostream>

// Assumption: 
// Indexing is always based on zero. 
// Doing inplace sorting of an array. So, original array will change.
 
template <typename ContainerType>
size_t partition_array (ContainerType& arr, size_t startIndex, size_t endIndex)
{
	// Fill in code here
	return 0;
}

// int kth_element (int arr[], int startIndex, int endIndex, const int& kthIndex)
template <typename ContainerType>
int kth_element (ContainerType& arr, size_t size, size_t startIndex, size_t endIndex, const size_t& kthIndex)
{
	// Fill in code here
	return 0;
}

int main() {
	std::vector<int> v{5, 10, 3, 13, 1, 2, 18, 6};
	// sorted {1, 2, 3, 5, 6, 10, 13, 18};
	std::cout << kth_element(v, v.size(), 0, v.size()-1, 0) << std::endl;
}

===================================================================================

6) Fibionacci series. When is it possible to calculate in compile time and how? 

13) How do you call particular template method of only certain type?

template <typename T> 
void foo() 
{
	std::cout << " foo called " << std::endl;
}

14)  Implement is same class type - is same type returns true else false. 
std::is_same<T,T> return true or false.

/**
 Implement method to return true if two types passed is same. 
 */

https://www.toptal.com/c-plus-plus/interview-questions
https://tests4geeks.com/blog/cpp-interview-questions/


